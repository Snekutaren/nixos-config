# Define a table for IPv4, IPv6, or mixed (inet) rules
    # 'inet' table applies to both IPv4 and IPv6
    table inet filter {
      # Input chain: Handles incoming traffic destined for the host
      chain input {
        type filter hook input priority 0; policy drop; # Default drop policy for security

        # Allow loopback traffic (essential for many services)
        ip saddr 127.0.0.1 accept
        ip6 saddr ::1 accept

        # Allow established and related connections (e.g., for replies to your outbound requests)
        ct state { established, related } accept

        # --- Open specific ports for services you run on this host ---
        # Example: Allow SSH (port 6622) from anywhere
        tcp dport 6622 accept

        # Example: Allow HTTP (port 80) if you run a web server
        # tcp dport 80 accept

        # Example: Allow HTTPS (port 443) if you run a web server
        # tcp dport 443 accept

        # Example: Allow ICMP (ping) - often useful for diagnostics, but can be dropped for more security
        # icmp type echo-request accept
        # icmpv6 type echo-request accept

        # Add more rules here as needed, e.g.,
        # tcp dport { 3000, 8000 } accept # Example: Allow multiple ports
        # ip saddr 192.168.1.0/24 tcp dport 5432 accept # Example: Allow PostgreSQL from local network

        # Log and drop anything else (if you want to see what's being dropped)
        # log prefix "nft-input-drop: " group 0 counter drop
      }

      # Forward chain: Handles traffic passing through the host (e.g., for routing or NAT)
      # Not typically needed unless your NixOS machine acts as a router.
      chain forward {
        type filter hook forward priority 0; policy drop; # Default drop
        # Add rules here if you need to forward traffic (e.g., for VPNs, containers)
        # For Docker/Podman, NAT rules usually go in the 'nat' table.
      }

      # Output chain: Handles outgoing traffic originating from the host
      # Default policy is usually 'accept' for outbound connections
      chain output {
        type filter hook output priority 0; policy accept;
      }
    }

    # Define a separate 'nat' table for Network Address Translation (e.g., for containers)
    table ip nat {
      # Postrouting chain: Modifies source IP of outgoing packets (e.g., masquerading for internet access)
      chain postrouting {
        type nat hook postrouting priority 100; policy accept;
        # Example: Masquerade traffic from a Podman bridge network
        # This rule assumes 'podman0' is your Podman bridge interface.
        # Replace 10.88.0.0/16 with your actual Podman bridge IP range if different.
        # Be careful: This is a generic example, Podman's netavark might create more complex rules.
        # oifname != "podman0" ip saddr 10.88.0.0/16 masquerade
        # You would typically enable IP forwarding below for this to work.
      }
    }